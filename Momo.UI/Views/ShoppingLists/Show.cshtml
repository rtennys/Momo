@using Momo.Common
@model ShoppingListsShowModel

@{
    var routeData = Request.RequestContext.RouteData;
    ViewBag.HeaderTitle = "{0}/{1}".F(routeData.Values["username"], routeData.Values["shoppinglist"]);
    ViewBag.Title = Model.Name;
}

@* This is for the "picked" javascript*@
@Html.AntiForgeryToken()

<div id="items-container">
    @Html.Partial("_ShowListItems", Model.Items)
</div>

<div id="edit-item-container" data-role="popup" class="ui-content" style="display: none;">
    <a href="#" data-rel="back" data-role="button" data-theme="a" data-icon="delete" data-iconpos="notext" class="ui-btn-right">Close</a>
    <form method="post" novalidate="novalidate">
        @Html.AntiForgeryToken()
        <input type="hidden" name="ShoppingListId" id="ShoppingListId" value="@Model.Id" />
        <input type="hidden" name="Id" id="Id" />
        <ol>
            <li><input type="text" placeholder="Name" name="Name" id="Name" data-val-required="Name is required." data-val="true" autocomplete="off" /></li>
            <li><input type="text" placeholder="Quantity" name="Quantity" id="Quantity" data-val-range-min="0" data-val-range-max="2147483647" data-val-range="Quantity must be ae positive number" data-val-number="Quantity must be a number." data-val="true" autocomplete="off" /></li>
            <li><input type="text" placeholder="Aisle" name="Aisle" id="Aisle" data-val-number="Aisle must be a number." data-val="true" autocomplete="off" /></li>
            <li><input type="text" placeholder="Price" name="Price" id="Price" data-val-number="Price must be a number." data-val="true" autocomplete="off" /></li>
        </ol>
        <input type="submit" value="Save" />
        @Html.ValidationSummary()
    </form>
</div>

@section FooterBarButtons
{
    @if (CurrentUser.HasShoppingListAccess())
    {
        @Html.ActionLink("Add Item", "AddItem", null, new { data_role = "button", data_icon = "plus", data_mini = "true", data_inline = "true", data_iconpos = "notext" })
    }
}

@section FooterContent
{

    @if (CurrentUser.HasShoppingListAccess())
    {
        using (Html.BeginForm("Clear", null, FormMethod.Post, new {data_ajax = "false"}))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.Id)
            <p>
                <input type="submit" value="Set all to Zero" data-icon="refresh" data-mini="true" data-inline="true" onclick=" return confirm('Setting a quantity to zero removes the item from view, but doesn\'t forget it.  Set all quantities to zero?'); " />
            </p>
        }
    }

    @if (CurrentUser.IsRouteUsername())
    {
        <p>
            @Html.ActionLink("Rename", "Rename", null, new { data_role = "button", data_icon = "gear", data_mini = "true", data_inline = "true", data_ajax = "false" })
            @Html.ActionLink("Sharing", "Share", null, new { data_role = "button", data_icon = "gear", data_mini = "true", data_inline = "true", data_ajax = "false" })
        </p>
        using (Html.BeginForm("Delete", null, FormMethod.Post, new {data_ajax = "false"}))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.Id)
            <p>
                <input type="submit" value="Delete This List" data-icon="delete" data-mini="true" data-inline="true" onclick=" return confirm('Are you sure? All items and saved prices will be lost.'); " />
            </p>
        }
    }

}
